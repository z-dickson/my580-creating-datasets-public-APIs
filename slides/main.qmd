---
title: "Data Collection for Social Scientists: Leveraging Public APIs with Python"
subtitle: ''
author: Zach Dickson, PhD
date: "May 2025"
institute: Department of Methodology<br>London School of Economics
bibliography: references.bib
format:
  revealjs: 
    fontsize: 1.5em
    logo: figures/LSE_logo.png
    embed-resources: true
    slide-number: true
    preview-links: auto
    transition: fade
    citation_package: biblatex
    transition-speed: fast
    theme: [night, custom.scss]
    highlight-style: github-light
    footer: '<a>*APIs for Data Collection*</a>'
    pdf-max-pages-per-slide: 1
    pdf-engine: xelatex
title-slide-attributes: 
  data-background-size: 15%
  data-background-position: 2% 2%
---





# Introduction 

::: {.incremental}

- My background 
- Introductions 
  - Who are you?
  - What is your background?
  - What are you hoping to learn in this module?
  - What is your experience with Python?
- Why this module?
- Pre-requisites
- Questions?
:::








# Overview of the Workshop 


- What is an API?
- Why use APIs for data collection?
- How to use Python's requests library to interact with APIs
- Fetching data from the UK House of Commons API
- Cleaning and transforming data for analysis


 **Everything is available on the [GitHub repository](https://github.com/z-dickson/my580-creating-datasets-public-APIs)**





# Learning Objectives
- Understand the fundamentals of APIs and how they can be used to access data
- Use Python's requests library to interact with REST APIs
- Fetch, clean, and transform data from the UK House of Commons API
- Apply data cleaning techniques to prepare datasets for analysis
- Critically evaluate the design of datasets for social science research






# Module 1: Introduction to APIs 
(15 minutes)




## What is an API?


::: {.incremental}

- **API** stands for Application Programming Interface
- APIs allow different software applications to communicate with each other
- They provide a set of rules and protocols for building and interacting with software applications
- APIs are used to access web services, databases, and other resources
- They can be public (open to everyone) or private (restricted access)
- They can be used to retrieve data, send data, or perform actions on a remote server
:::




## Why Use APIs for Data Collection?
::: {.incremental}

- **Data Access**: APIs provide a structured way to access data from various sources, such as social media platforms, government databases, and more.
- **Automation**: APIs allow for automated data retrieval and processing, reducing manual effort and errors.
- **Integration**: APIs enable integration between different software systems, allowing them to work together seamlessly.
- **Scalability**: APIs can handle large volumes of requests and data, making them suitable for applications that require scalability.
- **Flexibility**: APIs can be used to access a wide range of data and services, providing flexibility in how data is collected and used.
- **Reproducibility**: Using APIs allows researchers to access the most up-to-date data, ensuring that analyses are based on current information
:::






## Types of APIs

::: {.incremental}
- **REST APIs** (Representational State Transfer)
  - Use standard HTTP methods (`GET`, `POST`, `PUT`, `DELETE`)
  - Data is typically returned in JSON or XML format
- **SOAP APIs** (Simple Object Access Protocol)
  - Use XML for message format and rely on other application layer protocols like HTTP or SMTP
  - More complex and less commonly used than REST APIs
- **GraphQL APIs**
  - Allow clients to request specific data structures, reducing over-fetching and under-fetching of data
- **Webhooks**
  - Allow servers to send real-time data updates to clients
  - Useful for applications that require immediate data updates
- **Streaming APIs**
  - Provide a continuous stream of data, often used for real-time applications like social media feeds or financial market data
:::







## REST APIs 

::: {.incremental}
- REST APIs are the most common type of API used in web development
- They use standard HTTP methods to perform operations on resources
- Resources are identified by URLs (Uniform Resource Locators)
- Data is typically returned in JSON (JavaScript Object Notation) format, which is easy to read and parse
- REST APIs are stateless, meaning each request from a client contains all the information needed to process the request
- They are designed to be simple, scalable, and flexible
- REST APIs can be used to perform CRUD operations (Create, Read, Update, Delete) on resources
- They can also support additional operations like searching, filtering, and sorting data
:::








# Module 2: Understanding REST APIs & Python's `requests`




## Key Concepts of REST APIs
::: {.incremental}
- **Resources**: The data or services provided by the API, identified by URLs
- **HTTP Methods**: Standard methods used to interact with resources
  - `GET`: Retrieve data from the server
  - `POST`: Send data to the server to create a new resource
  - `PUT`: Update an existing resource on the server
  - `DELETE`: Remove a resource from the server
- **Status Codes**: Indicate the result of the API request
  - `200`: OK (successful request)
  - `201`: Created (resource successfully created)
  - `204`: No Content (successful request with no content returned)
  - `400`: Bad Request (invalid request)
  - `404`: Not Found (resource not found)
  - `500`: Internal Server Error (server error)
:::


## Request Parameters in REST APIs
::: {.incremental}
- **Query Parameters**: Used to filter or modify the data returned by the API
  - Added to the URL after a `?` and separated by `&`
  - Example: `https://api.example.com/data?filter=value&sort=asc`
- **Path Parameters**: Used to specify a specific resource in the URL
  - Example: `https://api.example.com/data/123` (where `123` is the ID of the resource)
- **Headers**: Additional information sent with the request, such as authentication tokens or content type
  - Example: `headers = {'Authorization': 'Bearer YOUR_API_KEY'}`
- **Body**: Data sent with POST or PUT requests, typically in JSON format
  - Example: `data = {'name': 'Example Item', 'value': 100}`
:::




## Response Formats: JSON and XML

::: {.incremental}
- APIs return data in various formats, but **JSON** is the most common for modern REST APIs.
  - **JSON (JavaScript Object Notation):**
    - Lightweight, text-based, and human-readable.
    - Uses key-value pairs (like Python dictionaries) and ordered lists (like Python lists).
    - Easy for machines to parse and generate.
    - Example seen earlier: `{"name": "Example Item", "value": 100}`
- **XML (eXtensible Markup Language):**
  - Another format, more verbose than JSON.
  - Uses tags similar to HTML: `<item><name>Example</name><value>100</value></item>`
  - You might encounter it with older APIs.
- **Identifying the Format:**
  - The `Content-Type` header in the API's HTTP response often tells you the format (e.g., `application/json`, `application/xml`).
:::






## Understanding API Responses

::: {.incremental}
- An API response is more than just the data you requested. Key components include:
  - **Status Code:** Essential for knowing if your request was successful (e.g., `200 OK`, `404 Not Found`).
  - **Headers:** Provide meta-information about the response.
    - `Content-Type`: Specifies the format of the response body (e.g., `application/json`).
    - `RateLimit-Remaining`: Some APIs tell you how many requests you have left in the current window.
    - `Date`, `Content-Length`, etc.
  - **Body:** The actual data (e.g., the JSON or XML payload).
- Always inspect these parts, especially the status code and `Content-Type`, before trying to process the body.
:::



## Conceptual API Error Handling

::: {.incremental}
- Things can and will go wrong! Be prepared.
- **Common Issues:**
  - **Network Problems:** Your internet connection fails, or the API server is temporarily unreachable.
  - **Client Errors (4xx Status Codes):**
    - `400 Bad Request`: Your request was malformed.
    - `401 Unauthorized` / `403 Forbidden`: You don't have permission.
    - `404 Not Found`: The resource you asked for doesn't exist.
    - `429 Too Many Requests`: You've hit a rate limit.
  - **Server Errors (5xx Status Codes):** The API server had a problem.
  - **Unexpected Data:** The API returns data in a structure you didn't anticipate.
- **Defensive Programming:**
  - *Always* check the status code.
  - Anticipate potential issues and write code to handle them gracefully (e.g., retry mechanisms for temporary errors, clear messages for fatal ones).
:::






# Module 3: Interacting with APIs using Python's `requests` Library
(~55 minutes)





## Introducing Python's `requests` Library

::: {.incremental}
- The `requests` library is the de facto standard for making HTTP requests in Python. [cite: 3]
- **Why `requests`?**
  - "Requests is designed to be used by humans to interact with the language. This is not always the case with HTTP libraries." - *[Requests documentation](https://requests.readthedocs.io/en/latest/)*
  - Simplifies complex tasks into simple method calls.
  - Handles many HTTP complexities automatically.
- **Installation (if not already installed, e.g., via Anaconda):** 
  ```bash
  pip install requests
  ```
:::




## Making a Simple `GET` Request



- The most common type of request is a `GET` request, used to retrieve data

```python
import requests # Import the library

url = "[https://api.example.com/data](https://api.example.com/data)" 
response = requests.get(url)

# The 'response' object now contains the server's response
print(f"Status Code: {response.status_code}")
print(f"Requested URL: {response.url}")
```

- `response.url` is useful to see the final URL after any redirects, especially when using parameters. 






## Passing Parameters in `GET` Requests




* Often, you need to send parameters to filter, sort, or paginate data
* The requests library makes this easy with the params argument.
  + Example: To request https://api.example.com/search?query=python&limit=10

```python
import requests

url = "[https://api.example.com/search](https://api.example.com/search)"
payload = {
    "query": "python",
    "limit": 10
}

response = requests.get(url, params=payload)

# requests automatically constructs the correct URL:
print(f"Full URL Sent: {response.url}")
# requests handles URL encoding (e.g., spaces become %20)
```









## Inspecting the Response Object

::: {.incremental}
* The `response` object from `requests.get()` holds valuable information:
  + `response.status_code`: The HTTP status code (e.g., `200`, `404`). Always check this first!
  + `response.headers`: A dictionary-like object of response headers.
    - Example: `response.headers['Content-Type']`
  + `response.text`: The raw textual content of the response body.
  + `response.content`: The response body in bytes (useful for non-text responses like images).
  + `response.json()`: If the Content-Type is JSON, this method conveniently parses it into a Python dictionary or list.

:::






## Working with JSON Responses

- Most modern APIs return data in JSON format
- `requests` can automatically parse JSON responses with the `.json()` method
- calling `response.json()` on a non-JSON response will raise an error


```python
import requests

url = "[https://jsonplaceholder.typicode.com/todos/1](https://jsonplaceholder.typicode.com/todos/1)" # A simple public JSON API
response = requests.get(url)

if response.status_code == 200:
    # Check if content-type is actually JSON (good practice)
    if 'application/json' in response.headers.get('Content-Type', ''):
        data = response.json() # Parses JSON into a Python dictionary
        # calling `response.json()` on a non-JSON response will raise an error
        print(data)
        print(f"Title: {data['title']}")
    else:
        print("Response was not JSON.")
else:
    print(f"Request failed with status code: {response.status_code}")
```




## Error Handling with `requests`

**Always check the status code of the response to ensure your request was successful**


::: {.incremental}
* Check `response.status_code`:
  + Manually check if `response.status_code` is what you expect (e.g., `200`).
  + Implement conditional logic based on the code
* Use `response.raise_for_status()`:
  + This method will raise an `requests.exceptions.HTTPError` if the request returned an unsuccessful status code (4xx client error or 5xx server error).
  + It's a quick way to halt execution if something went wrong.
* Catch `requests.exceptions.RequestException`:
  + This is a base class for exceptions `requests` can raise (e.g., network connection errors).
:::


## Example of Error Handling with `requests`


```python
import requests

url = "[https://jsonplaceholder.typicode.com/nonexistent](https://jsonplaceholder.typicode.com/nonexistent)"
try:
    response = requests.get(url)
    response.raise_for_status() # Raises HTTPError for 4xx/5xx
    data = response.json()
    print(data)
except requests.exceptions.HTTPError as http_err:
    print(f"HTTP error occurred: {http_err}") 
except requests.exceptions.RequestException as err:
    print(f"Other error occurred: {err}")
```


## Handling JSON Data in Python
- JSON data is often returned as a dictionary or list in Python
- You can access elements using standard Python syntax


```python
# Example JSON data
data = {
    "userId": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": False
}
# Accessing elements in the JSON data
print(data["userId"])  # Output: 1
print(data["title"])   # Output: delectus aut autem
print(data["completed"])  # Output: False
```


## Summary of Key Points
- APIs allow applications to communicate and share data
- REST APIs use standard HTTP methods to interact with resources
- Python's `requests` library simplifies making HTTP requests and handling responses
- Always check the status code and handle errors gracefully
- JSON is a common format for API responses, and `requests` can easily parse it into Python data structures






# Module 4: Fetching Data from the UK House of Commons API






## Overview of the UK House of Commons API
- The UK House of Commons API provides access to various datasets related to parliamentary activities, including:
  - Members of Parliament (MPs)
  - Bills and legislation
  - Votes and divisions
  - Committees and their activities
- The API is a RESTful service that returns data in JSON format
- Documentation: [UK House of Commons API Documentation](https://api.parliament.uk/)
- The API is designed to be used by developers, researchers, and the public to access parliamentary data programmatically


## HOC API 

![UK House of Commons API Overview](figures/UK_HOC_API.png){width=100%}



## Notebook activity
- In this module, we will use the UK House of Commons API to fetch data related to parliamentary activities
- We'll use the `UK_HOC_API.ipynb` notebook to guide us through the process


## Example Use Case: Questions Asked During PMQs


::: {.callout-tip title="Research Project Idea"}
Suppose we want to understand which questions are asked in the House of Commons during PMQs. We want to create a dataset of all the questions asked during PMQs, with each row representing a question and columns for the date, MP who asked the question, and the content of the question.
:::


- The Prime Minister's Questions (PMQs) is a weekly session in the House of Commons where MPs can ask questions to the Prime Minister
- The UK House of Commons API provides an endpoint to retrieve questions asked during PMQs
- We can use this endpoint to create a dataset of all questions asked during PMQs, including:
  - Date of the question
  - MP who asked the question
  - Content of the question






## Python Notebook Task

- Using the HOC API, answer one of the following questions: 
  - What is the gender composition of MPs in the current parliament? 
  - What are the safest five constituencies for the Labour Party in the current parliament (e.g. 2024 General Election)?
  - How many statutory instruments have been issued in 2025?

**Advanced Task:**

- How many bills dealing with the economy have been passed (e.g. have became acts) since 2020?
- What was the narrowest margin of victory in a vote in the 2019 General Election?





# Module 5: Putting It All Together: APIs for Data Collection






## Data Collection Workflow with APIs

- **Objective:** Create an electoral map that visualizes turnout for every constituency in the UK 





![Electoral Map](figures/uk_electoral_map.png){width=50% position=center}


## Process Overview


::: {.callout-tip}

**Let's start by thinking about what we want our final product to look like and how we can achieve it using the UK House of Commons API.**

:::

::: {.incremental}

1. Use the `Members` API to get a dataset of each constituency ID in the UK for 2024
2. Use constituency IDs to find the electoral results for each constituency in 2024 using the `Members` API
   - This will include the number of votes for each party and the turnout percentage
3. Use the constituency IDs to find the geometry (e.g. boundaries) of each constituency to plot the results on a map
4. Clean the data and prepare it for visualization
5. Create a map of the results using the `geopandas` library 

:::


## Python Notebook Task

We'll use the `electoral_map_2024.ipynb` notebook to guide us through the process of creating an electoral map