{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Data Collection for Social Scientists: Leveraging Public APIs with Python\"\n",
        "subtitle: ''\n",
        "author: Zach Dickson, PhD\n",
        "date: \"May 2025\"\n",
        "institute: Department of Methodology<br>London School of Economics\n",
        "bibliography: references.bib\n",
        "format:\n",
        "  revealjs: \n",
        "    fontsize: 1.5em\n",
        "    logo: figures/LSE_logo.png\n",
        "    embed-resources: true\n",
        "    slide-number: true\n",
        "    preview-links: auto\n",
        "    transition: fade\n",
        "    citation_package: biblatex\n",
        "    transition-speed: fast\n",
        "    theme: [simple, custom.scss]\n",
        "    footer: '<a>*APIs for Data Collection*</a>'\n",
        "    pdf-max-pages-per-slide: 1\n",
        "    pdf-engine: xelatex\n",
        "title-slide-attributes: \n",
        "  data-background-size: 15%\n",
        "  data-background-position: 2% 2%\n",
        "  beamer:\n",
        "    theme: Marburg\n",
        "    slide-level: 2\n",
        "    logo: figures/LSE_logo.png\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Introduction \n",
        "\n",
        "::: {.incremental}\n",
        "\n",
        "- My background \n",
        "- Introductions \n",
        "  - Who are you?\n",
        "  - What is your background?\n",
        "  - What are you hoping to learn in this module?\n",
        "  - What is your experience with Python?\n",
        "- Why this module?\n",
        "- Pre-requisites\n",
        "- Questions?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Overview of the Workshop \n",
        "\n",
        "\n",
        "UPDATE: \n",
        "\n",
        "- What is an API?\n",
        "- Why use APIs for data collection?\n",
        "- How to use Python's requests library to interact with APIs\n",
        "- Fetching data from the UK House of Commons API\n",
        "- Cleaning and transforming data for analysis\n",
        "- Evaluating dataset design for social science research\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Learning Objectives\n",
        "- Understand the fundamentals of APIs and how they can be used to access data\n",
        "- Use Python's requests library to interact with REST APIs\n",
        "- Fetch, clean, and transform data from the UK House of Commons API\n",
        "- Apply data cleaning techniques to prepare datasets for analysis\n",
        "- Critically evaluate the design of datasets for social science research\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Module 1: Introduction to APIs \n",
        "(15 minutes)\n",
        "\n",
        "\n",
        "# What is an API?\n",
        "\n",
        "\n",
        "::: {.incremental}\n",
        "\n",
        "- **API** stands for Application Programming Interface\n",
        "- APIs allow different software applications to communicate with each other\n",
        "- They provide a set of rules and protocols for building and interacting with software applications\n",
        "- APIs are used to access web services, databases, and other resources\n",
        "- They can be public (open to everyone) or private (restricted access)\n",
        "- They can be used to retrieve data, send data, or perform actions on a remote server\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Why Use APIs for Data Collection?\n",
        "::: {.incremental}\n",
        "\n",
        "- **Data Access**: APIs provide a structured way to access data from various sources, such as social media platforms, government databases, and more.\n",
        "- **Automation**: APIs allow for automated data retrieval and processing, reducing manual effort and errors.\n",
        "- **Integration**: APIs enable integration between different software systems, allowing them to work together seamlessly.\n",
        "- **Scalability**: APIs can handle large volumes of requests and data, making them suitable for applications that require scalability.\n",
        "- **Flexibility**: APIs can be used to access a wide range of data and services, providing flexibility in how data is collected and used.\n",
        "- **Reproducibility**: Using APIs allows researchers to access the most up-to-date data, ensuring that analyses are based on current information\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Types of APIs\n",
        "\n",
        "::: {.incremental}\n",
        "- **REST APIs** (Representational State Transfer)\n",
        "  - Use standard HTTP methods (GET, POST, PUT, DELETE)\n",
        "  - Data is typically returned in JSON or XML format\n",
        "- **SOAP APIs** (Simple Object Access Protocol)\n",
        "  - Use XML for message format and rely on other application layer protocols like HTTP or SMTP\n",
        "  - More complex and less commonly used than REST APIs\n",
        "- **GraphQL APIs**\n",
        "  - Allow clients to request specific data structures, reducing over-fetching and under-fetching of data\n",
        "- **Webhooks**\n",
        "  - Allow servers to send real-time data updates to clients\n",
        "  - Useful for applications that require immediate data updates\n",
        "- **Streaming APIs**\n",
        "  - Provide a continuous stream of data, often used for real-time applications like social media feeds or financial market data\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# REST APIs \n",
        "\n",
        "::: {.incremental}\n",
        "- **REST** APIs are the most common type of API used in web development\n",
        "- They use standard HTTP methods to perform operations on resources\n",
        "- Resources are identified by URLs (Uniform Resource Locators)\n",
        "- Data is typically returned in JSON (JavaScript Object Notation) format, which is easy to read and parse\n",
        "- REST APIs are stateless, meaning each request from a client contains all the information needed to process the request\n",
        "- They are designed to be simple, scalable, and flexible\n",
        "- REST APIs can be used to perform CRUD operations (Create, Read, Update, Delete) on resources\n",
        "- They can also support additional operations like searching, filtering, and sorting data\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# REST API Example\n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "import requests\n",
        "# Define the API endpoint\n",
        "url = \"https://api.example.com/data\"\n",
        "# Send a GET request to the API\n",
        "response = requests.get(url)\n",
        "# Check if the request was successful\n",
        "if response.status_code == 200:\n",
        "    # Parse the JSON data\n",
        "    data = response.json()\n",
        "    print(data)\n",
        "else:\n",
        "    print(f\"Error: {response.status_code}\")\n",
        "```\n",
        "\n",
        "\n",
        "# REST API Output \n",
        "```json\n",
        "{\n",
        "    \"data\": [\n",
        "        {\n",
        "            \"id\": 1,\n",
        "            \"name\": \"Example Item 1\",\n",
        "            \"value\": 100\n",
        "        },\n",
        "        {\n",
        "            \"id\": 2,\n",
        "            \"name\": \"Example Item 2\",\n",
        "            \"value\": 200\n",
        "        }\n",
        "    ],\n",
        "    \"status\": \"success\"\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# Module 2: Understanding REST APIs & Python's requests\n",
        "\n",
        "\n",
        "\n",
        "# Key Concepts of REST APIs\n",
        "::: {.incremental}\n",
        "- **Resources**: The data or services provided by the API, identified by URLs\n",
        "- **HTTP Methods**: Standard methods used to interact with resources\n",
        "  - **GET**: Retrieve data from the server\n",
        "  - **POST**: Send data to the server to create a new resource\n",
        "  - **PUT**: Update an existing resource on the server\n",
        "  - **DELETE**: Remove a resource from the server\n",
        "- **Status Codes**: Indicate the result of the API request\n",
        "  - **200**: OK (successful request)\n",
        "  - **201**: Created (resource successfully created)\n",
        "  - **204**: No Content (successful request with no content returned)\n",
        "  - **400**: Bad Request (invalid request)\n",
        "  - **404**: Not Found (resource not found)\n",
        "  - **500**: Internal Server Error (server error)\n",
        ":::\n",
        "\n",
        "\n",
        "# Request Parameters in REST APIs\n",
        "::: {.incremental}\n",
        "- **Query Parameters**: Used to filter or modify the data returned by the API\n",
        "  - Added to the URL after a `?` and separated by `&`\n",
        "  - Example: `https://api.example.com/data?filter=value&sort=asc`\n",
        "- **Path Parameters**: Used to specify a specific resource in the URL\n",
        "  - Example: `https://api.example.com/data/123` (where `123` is the ID of the resource)\n",
        "- **Headers**: Additional information sent with the request, such as authentication tokens or content type\n",
        "  - Example: `headers = {'Authorization': 'Bearer YOUR_API_KEY'}`\n",
        "- **Body**: Data sent with POST or PUT requests, typically in JSON format\n",
        "  - Example: `data = {'name': 'Example Item', 'value': 100}`\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Response Formats: JSON and XML\n",
        "\n",
        "::: {.incremental}\n",
        "- APIs return data in various formats, but **JSON** is the most common for modern REST APIs.\n",
        "  - **JSON (JavaScript Object Notation):**\n",
        "    - Lightweight, text-based, and human-readable.\n",
        "    - Uses key-value pairs (like Python dictionaries) and ordered lists (like Python lists).\n",
        "    - Easy for machines to parse and generate.\n",
        "    - Example seen earlier: `{\"name\": \"Example Item\", \"value\": 100}`\n",
        "- **XML (eXtensible Markup Language):**\n",
        "  - Another format, more verbose than JSON.\n",
        "  - Uses tags similar to HTML: `<item><name>Example</name><value>100</value></item>`\n",
        "  - You might encounter it with older APIs.\n",
        "- **Identifying the Format:**\n",
        "  - The `Content-Type` header in the API's HTTP response often tells you the format (e.g., `application/json`, `application/xml`).\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Understanding API Responses\n",
        "\n",
        "::: {.incremental}\n",
        "- An API response is more than just the data you requested. Key components include:\n",
        "  - **Status Code:** Essential for knowing if your request was successful (e.g., `200 OK`, `404 Not Found`).\n",
        "  - **Headers:** Provide meta-information about the response.\n",
        "    - `Content-Type`: Specifies the format of the response body (e.g., `application/json`).\n",
        "    - `RateLimit-Remaining`: Some APIs tell you how many requests you have left in the current window.\n",
        "    - `Date`, `Content-Length`, etc.\n",
        "  - **Body:** The actual data (e.g., the JSON or XML payload).\n",
        "- Always inspect these parts, especially the status code and `Content-Type`, before trying to process the body.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "# Conceptual API Error Handling\n",
        "\n",
        "::: {.incremental}\n",
        "- Things can and will go wrong! Be prepared.\n",
        "- **Common Issues:**\n",
        "  - **Network Problems:** Your internet connection fails, or the API server is temporarily unreachable.\n",
        "  - **Client Errors (4xx Status Codes):**\n",
        "    - `400 Bad Request`: Your request was malformed.\n",
        "    - `401 Unauthorized` / `403 Forbidden`: You don't have permission.\n",
        "    - `404 Not Found`: The resource you asked for doesn't exist.\n",
        "    - `429 Too Many Requests`: You've hit a rate limit.\n",
        "  - **Server Errors (5xx Status Codes):** The API server had a problem.\n",
        "  - **Unexpected Data:** The API returns data in a structure you didn't anticipate.\n",
        "- **Defensive Programming:**\n",
        "  - *Always* check the status code.\n",
        "  - Anticipate potential issues and write code to handle them gracefully (e.g., retry mechanisms for temporary errors, clear messages for fatal ones).\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "# Module 3: Interacting with APIs using Python's `requests` Library\n",
        "(~55 minutes)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Introducing Python's `requests` Library\n",
        "\n",
        "::: {.incremental}\n",
        "- The `requests` library is the de facto standard for making HTTP requests in Python. [cite: 3]\n",
        "- **Why `requests`?**\n",
        "  - \"Requests is designed to be used by humans to interact with the language. This is not always the case with HTTP libraries.\" - *[Requests documentation](https://requests.readthedocs.io/en/latest/)*\n",
        "  - Simplifies complex tasks into simple method calls.\n",
        "  - Handles many HTTP complexities automatically.\n",
        "- **Installation (if not already installed, e.g., via Anaconda):** \n",
        "  ```bash\n",
        "  pip install requests\n",
        "  ```\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Making a Simple GET Request\n",
        "\n",
        "::: {.incremental}\n",
        "\n",
        "- The most common type of request is a `GET` request, used to retrieve data\n"
      ],
      "id": "4438d159"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import requests # Import the library\n",
        "\n",
        "url = \"[https://api.example.com/data](https://api.example.com/data)\" \n",
        "response = requests.get(url)\n",
        "\n",
        "# The 'response' object now contains the server's response\n",
        "print(f\"Status Code: {response.status_code}\")\n",
        "print(f\"Requested URL: {response.url}\")"
      ],
      "id": "37c1d983",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- `response.url` is useful to see the final URL after any redirects, especially when using parameters. \n",
        ":::\n"
      ],
      "id": "524477f8"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/zach/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}